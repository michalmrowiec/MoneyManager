@page "/forgotpassword"
@using Microsoft.AspNetCore.WebUtilities;
@using MoneyManager.Client.Models.Response;
@using MoneyManager.Client.Services;
@using MoneyManager.Client.ViewModels;
@using Newtonsoft.Json;
@inject IHttpRecordService http
@inject NavigationManager navManager
@inject NameOfSubpage nameOfSubpage

<PageTitle>ForgotPassword</PageTitle>

<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Reset Password</h4>
        <div class="card-body">
            <EditForm Model="@RegisterUserVM" OnValidSubmit="HandleValidSubmit">
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="RegisterUserVM.Password" type="password" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Repeat password</label>
                    <InputText @bind-Value="RegisterUserVM.RepeatPassword" type="password" class="form-control" />
                </div>
                <button class="btn btn-primary">
                    @if (_loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Register
                </button>
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger mt-3 mb-0">@_errorMessage</div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    public RegisterUserVM RegisterUserVM { get; set; } = new();
    private string _token = "";
    private bool _loading;
    private string? _errorMessage;

    protected override void OnInitialized()
    {
        nameOfSubpage.NamesOfSubpage = NamesOfSubpageEnum.ForgotPassword;
        Navigate();
    }

    private async void HandleValidSubmit()
    {
        _loading = true;
        try
        {
            var result = await http.UpdateItem(RegisterUserVM, "api/account/", _token);

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
                navManager.NavigateTo("login");
            else
            {
                _errorMessage = await result.Content.ReadAsStringAsync();
                var response = await result.Content.ReadAsStringAsync();
                var baseResponse = JsonConvert.DeserializeObject<UserResponse>(response) ?? new();
                _errorMessage = baseResponse.Message;
                baseResponse?.ValidationErrors?.ForEach(e => _errorMessage += $"{e}. ");

                _loading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _loading = false;
            StateHasChanged();
        }
    }

    void Navigate()
    {
        var query = new Dictionary<string, string>();

        navManager.NavigateTo(QueryHelpers.AddQueryString(navManager.Uri, query));

        var uri = navManager.ToAbsoluteUri(navManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("access_token", out var param))
        {
            _token = param.First();
        }
    }
}
