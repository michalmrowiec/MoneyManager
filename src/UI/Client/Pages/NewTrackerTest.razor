@page "/tracker2"
@using MoneyManager.Client.Components
@using MoneyManager.Client.Services;
@using MoneyManager.Client.ViewModels;
@using Newtonsoft.Json;
@inject IHttpRecordService _httpTracker

<h3>NewTrackerTest</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3 mb-0">@_errorMessage</div>
}

<DataGrid TItem="RecordVM"
          Data="@_recordList"
          @bind-SelectedRow="@_selectedRecord"
          PageSize="50"
          Responsive>
    <DataGridColumn Field="@nameof(RecordVM.Name)" Caption="Name"></DataGridColumn>
    <DataGridColumn Field="@nameof(RecordVM.Category.Name)" Caption="Category">
        <DisplayTemplate>
            @context?.Category?.Name
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn Field="@nameof(RecordVM.Amount)" Caption="Amount"></DataGridColumn>
    <DataGridColumn Field="@nameof(RecordVM.TransactionDate)" Caption="Date">
        <DisplayTemplate>
            @context?.TransactionDate.ToString("dd/MM")
        </DisplayTemplate>
    </DataGridColumn>
@*    <DataGridColumn TItem="RecordVM" Field="@nameof( RecordVM.Id)" Sortable="false" Filterable="false" Display="Display.None.Block.OnTablet">
        <DisplayTemplate>
            <Button Color="Color.Primary" Size="Size.ExtraSmall" Clicked="@(x => OpenEditForm(context))">
                Edit
            </Button>
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RecordVM" Field="@nameof( RecordVM.Id)" Sortable="false" Filterable="false" Display="Display.None.TableCell.OnTablet">
        <DisplayTemplate>
            <Button Color="Color.Danger" Size="Size.ExtraSmall" Clicked="@(x => OpenDeleteDialog(context))">
                Delete
            </Button>
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="RecordVM" Field="@nameof( RecordVM.Id)" Sortable="false" Filterable="false" Display="Display.TableCell.OnTablet.None.OnTablet">
        <DisplayTemplate>
            <Dropdown>
                <DropdownToggle Outline Color="Color.Secondary" Size="Size.Small"></DropdownToggle>
                <DropdownMenu>
                    <DropdownItem @onclick="@(x => OpenEditForm(context))">Edit</DropdownItem>
                    <DropdownItem @onclick="@(x => OpenDeleteDialog(context))">Delete</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </DisplayTemplate>
    </DataGridColumn>*@
    <DataGridColumn TItem="RecordVM" Field="@nameof( RecordVM.Id)" Sortable="false" Filterable="false">
        <DisplayTemplate>
            <Button Color="Color.Primary" Size="Size.ExtraSmall" Clicked="@(x => OpenEditForm(context))" Display="Display.None.TableCell.OnTablet" Class="me-4">
                Edit
            </Button>
            <Button Color="Color.Danger" Size="Size.ExtraSmall" Clicked="@(x => OpenDeleteDialog(context))" Display="Display.None.TableCell.OnTablet">
                Delete
            </Button>
            <Dropdown Display="Display.TableCell.OnTablet.None.OnTablet">
                <DropdownToggle Outline Color="Color.Secondary" Size="Size.Small"></DropdownToggle>
                <DropdownMenu>
                    <DropdownItem @onclick="@(x => OpenEditForm(context))">Edit</DropdownItem>
                    <DropdownItem @onclick="@(x => OpenDeleteDialog(context))">Delete</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </DisplayTemplate>
    </DataGridColumn>
@*    <DataGridColumn TItem="RecordVM" Field="@nameof( RecordVM.Id)" Sortable="false" Filterable="false">
        <DisplayTemplate>
            <button class="btn-close" @onclick="@(async () => { await OpenDeleteDialog(context); })"></button>
        </DisplayTemplate>
    </DataGridColumn>*@
</DataGrid>

@if (_deleteDialogOpen && _recordToDelete != null)
{
    <ConfirmDeleteDialog DialogType="ConfirmDeleteDialog.ModalDialogType.DeleteCancel" Title="Are you sure?" Text=@($"Do you want delete this: {_recordToDelete.Name} {_recordToDelete.TransactionDate}?") OnClose="@CloseDeleteDialog"></ConfirmDeleteDialog>
}

@if (_editFormOpen && _editRecord != null)
{
    <RecordFormDialog Title="Edit record" OnClose="CloseEditForm" FormRecordItem="ReturnedRecord" RecordToFill="_editRecord" TypeOfDialog="TypeOfFormlDialog.EditRecord"></RecordFormDialog>
}

@code {
    private string? _errorMessage;

    private List<RecordVM> _recordList;
    private RecordVM _selectedRecord;

    private bool _deleteDialogOpen;
    private bool _editFormOpen;

    private RecordVM? _recordToDelete;
    private RecordVM? _editRecord = null;


    private void ReturnedRecord(RecordVM recordVM)
    {
        _editRecord = recordVM;
    }

    #region Delete dialog
    private async Task CloseDeleteDialog(bool deleteConfirmed)
    {
        if (deleteConfirmed && _recordToDelete != null)
        {
            await Delete(_recordToDelete.Id);
        }
        _deleteDialogOpen = false;
        //await GetTable(_selectedYearByUser, _selectedMonthByUser);
        await GetTable();
        StateHasChanged();
    }

    private async Task OpenDeleteDialog(RecordVM record)
    {
        _deleteDialogOpen = true;
        _recordToDelete = record;
        StateHasChanged();
    }
    #endregion

    #region Edit form
    private async Task CloseEditForm(bool editConfirmed)
    {
        _deleteDialogOpen = false;
        if (editConfirmed && _editRecord != null)
        {
            await Update();
        }
        //await GetTable(_selectedYearByUser, _selectedMonthByUser);
        await GetTable();
        _editRecord = null;
        StateHasChanged();
    }

    private void OpenEditForm(RecordVM record)
    {
        _editFormOpen = true;
        _editRecord = record;
        StateHasChanged();
    }
    #endregion

    private async Task Delete(int id)
    {
        try
        {
            var response = await _httpTracker.DeleteItem(id, "/api/tracker/");
            if (response == null) return;
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
                _errorMessage = await response.Content.ReadAsStringAsync();

        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private async Task Update()
    {
        try
        {
            if (_editRecord == null) return;
            var response = await _httpTracker.UpdateItem(_editRecord, "/api/tracker/");
            if (response == null) return;
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                _errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void Test(params string[] click)
    {
        foreach (var item in click)
        {
            Console.WriteLine(item);
        }
    }

    private async Task GetTable()
    {
        try
        {
            var responseMessage = await _httpTracker.GetListOfItems("/api/tracker/");
            if (responseMessage == null) return;
            if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _recordList = JsonConvert.DeserializeObject<List<RecordVM>>(jsonResponse) ?? new List<RecordVM>();
            }
            //else
            //_errorMessage = await responseMessage.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            //_errorMessage = ex.Message;
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTable();
    }
}
