@page "/addrecord"
@using MoneyManager.Client.Components
@using MoneyManager.Client.Services
@using System.Net
@using MoneyManager.Client.ViewModels
@inject IHttpRecordService _httpService
@inject NameOfSubpage nameOfSubpage
@inject ErrorMessage errorMessage

<PageTitle>Add new record</PageTitle>

<button class="btn btn-primary" @onclick="@(x => OpenDeleteDialog())">Add new record</button>

<button class="btn btn-primary" @onclick="@(x => {_rdio2 = true; StateHasChanged();})">Add new record2</button>

<div>
    <p>@_error</p>
</div>

@if (AddDialogOpen)
{
    <RecordFormDialog Title="Add new record"
                      RecurringRecordsPanel="true"
                      OnClose="CloseDeleteDialog"
                      FormRecordItem="@((recordVM) => {_recordItem = recordVM;})"
                      RecurringRecordItem="@((value) => _recurringRecordItem = value)"
                      TypeOfDialog="TypeOfFormlDialog.AddRecord">
    </RecordFormDialog>
}

@if (_rdio2)
{
    <NewRecordFormDialog
        TypeOfDialog="NewRecordFormDialog.NewTypeOfFormlDialog.Add"
        EventCallbacks="new List<EventCallback>() { EventCallback.Factory.Create(this, x => _rdio2 = false) }" />
}

@code {
    private bool _rdio2;
    private RecordVM? _recordItem;
    private RecurringRecordVM? _recurringRecordItem;
    private string? _error;

    private bool AddDialogOpen { get; set; }

    protected async Task CloseDeleteDialog(bool deleteConfirmed)
    {
        if (deleteConfirmed && _recordItem != null)
        {
            try
            {
                var response = await _httpService.CreateItem(_recordItem, "/api/tracker");
                if (response == null) return;
                if (response.StatusCode != HttpStatusCode.Created)
                {
                    errorMessage.Message = await response.Content.ReadAsStringAsync();
                    _error = await response.Content.ReadAsStringAsync();
                }
            }
            catch (Exception ex)
            {
                errorMessage.Message = ex.Message;
                _error = ex.Message;
            }
        }
        if (deleteConfirmed && _recurringRecordItem != null)
        {
            try
            {
                var response = await _httpService.CreateItem(_recurringRecordItem, "api/recurring");
                if (response == null) return;
                if (response.StatusCode != HttpStatusCode.Created)
                {
                    errorMessage.Message = await response.Content.ReadAsStringAsync();
                    _error = await response.Content.ReadAsStringAsync();
                }
                await _httpService.GetListOfItems("api/recurring/ex");
            }
            catch (Exception ex)
            {
                errorMessage.Message = ex.Message;
                _error = ex.Message;
            }
        }
        AddDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog()
    {
        AddDialogOpen = true;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        nameOfSubpage.NamesOfSubpage = NamesOfSubpageEnum.Add;
    }
}