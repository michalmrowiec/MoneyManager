@page "/categories"
@using MoneyManager.Client.Components
@using MoneyManager.Client.Models
@using MoneyManager.Client.Services
@using MoneyManager.Client.ViewModels
@using Newtonsoft.Json
@inject IHttpRecordService _httpTracker
@inject NameOfSubpage nameOfSubpage
@inject ErrorMessage errorMessage

<PageTitle>Categories</PageTitle>

<button class="btn btn-primary" @onclick="@(x => OpenCreateCategoryDialog())">Add category</button>

@if (_categories is null)
{
    <p><em>Loading...</em></p>
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (_categories.Count is 0)
{
    <p class="mt-3">You don't have any categories. You can add them using the button above.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th width="80%">
                    <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(RecordField.Name))">Name @_setOrderByArrow[(int)RecordField.Name]</button>
                </th>
                <th width="10%">
                    <div></div>
                </th>
                <th width="10%">
                    <div></div>
                </th>
            </tr>
        </thead>
    </table>
    <tbody>
        @foreach (var category in _categories)
        {
            <tr>
                <td class="align-middle" width="80%">
                    @category.Name
                </td>
                <td class="align-middle" width="10%">
                    <button class="btn btn-outline-secondary btn-sm align-middle" @onclick="@(x => OpenEditCategoryDialog(category))">Edit</button>
                </td>
                <td class="align-middle" width="10%">
                    <button class="btn-close" @onclick="@(x => { _categoryToDelete = category; _deleteDialogOpen = true; StateHasChanged(); })"></button>
                </td>
            </tr>
        }
    </tbody>
}
@if (_deleteDialogOpen)
{
    <ConfirmDeleteDialog
        DialogType="ConfirmDeleteDialog.ModalDialogType.DeleteCancel"
        EventCallbacks="OnCloseDeleteDialog"
        UriDelete="/api/category/"
        IdRecordToDelete="_categoryToDelete?.Id"
        Title="Are you sure?"
        Text=@($"Do you want delete {_categoryToDelete?.Name}?")>
    </ConfirmDeleteDialog>
}
@if (CategoryFormOpen)
{
    <CategoryFormDialog Title="Edit category" TypeOfModal="@_typeOfModalDialog" OnClose="CloseEditDialog" CategoryItem="_categoryToUpdate"></CategoryFormDialog>
}
@if (ReferenceToCategoryOpen)
{
    <CategoryReferenceToRecordDialog ListOfRecords="ReferenceToCategoryListOfRecords" OnClose="CloseReferenceToCategoryDialog" OnDelete="CloseDeleteDialog"></CategoryReferenceToRecordDialog>
}


@code {
    private CategoryVM? _categoryToDelete;
    private CategoryVM? _categoryToUpdate;
    private List<CategoryVM>? _categories;
    private CategoryFormDialog.TypeOfModalDialog _typeOfModalDialog;
    private string[] _setOrderByArrow = { "" };

    public bool _deleteDialogOpen = false;
    public bool CategoryFormOpen { get; set; }
    public bool ReferenceToCategoryOpen { get; set; }
    public List<RecordVM>? ReferenceToCategoryListOfRecords { get; set; }

    private List<EventCallback> OnCloseDeleteDialog { get; set; }

    private async Task CloseDeleteDialog(bool delete)
    {
        _deleteDialogOpen = false;
        ReferenceToCategoryOpen = false;

        if (delete)
        {
            try
            {
                await DeleteCategory();
            }
            catch (Exception ex)
            {
                errorMessage.Message = ex.Message;
            }
        }
        await GetAllategories();
        StateHasChanged();
    }

    private async Task DeleteCategory()
    {
        if (_categoryToDelete is null)
        {
            errorMessage.Message = "Sorry, category not found";
            return;
        }

        try
        {
            var respond = await _httpTracker.DeleteItem(_categoryToDelete.Id, "/api/category/");
            if (respond != null && respond.StatusCode != System.Net.HttpStatusCode.OK)
                errorMessage.Message = await respond.Content.ReadAsStringAsync();

        }
        catch (Exception ex)
        {
            errorMessage.Message = ex.Message;
        }
    }

    private void CloseReferenceToCategoryDialog()
    {
        ReferenceToCategoryOpen = false;
        StateHasChanged();
    }

    private async Task<List<RecordVM>?> CheckCategoryReference(int categoryId)
    {
        var recordWithCategoryToDelete = await _httpTracker.GetRecordsForCategoryId(categoryId, "/api/tracker/cat/");
        var rwct = await recordWithCategoryToDelete.Content.ReadAsStringAsync();
        var listRe = JsonConvert.DeserializeObject<List<RecordVM>>(rwct) ?? new List<RecordVM>();
        if (listRe.Capacity == 0)
            return null;
        return listRe;

    }

    private async Task CloseEditDialog()
    {
        CategoryFormOpen = false;
        _categoryToUpdate = null;
        await GetAllategories();
        StateHasChanged();
    }

    private void OpenEditCategoryDialog(CategoryVM category)
    {
        _typeOfModalDialog = CategoryFormDialog.TypeOfModalDialog.Update;
        CategoryFormOpen = true;
        _categoryToUpdate = category;
        StateHasChanged();
    }

    private void OpenCreateCategoryDialog()
    {
        _typeOfModalDialog = CategoryFormDialog.TypeOfModalDialog.Create;
        CategoryFormOpen = true;
        StateHasChanged();
    }

    private void SortButtonClick(RecordField sortBy)
    {
        SortArrayService.SortByType(sortBy, _setOrderByArrow[0] == "↑", ref _categories, ref _setOrderByArrow);
    }

    private async Task GetAllategories()
    {
        var respond = await _httpTracker.GetListOfItems("/api/category");
        var json = await respond.Content.ReadAsStringAsync();
        _categories = JsonConvert.DeserializeObject<List<CategoryVM>>(json);

        _setOrderByArrow[0] = "";
        SortButtonClick(RecordField.Name);
    }

    protected override async Task OnInitializedAsync()
    {
        nameOfSubpage.NamesOfSubpage = NamesOfSubpageEnum.Categories;
        await GetAllategories();

        OnCloseDeleteDialog = new List<EventCallback>
        {
            EventCallback.Factory.Create(this, GetAllategories),
            EventCallback.Factory.Create(this,  x => _deleteDialogOpen = false),
            EventCallback.Factory.Create(this,  x => _categoryToDelete = null)
        };
    }
}