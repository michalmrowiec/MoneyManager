@page "/recurring"
@using MoneyManager.Client.Components
@using MoneyManager.Client.Models
@using MoneyManager.Client.Services
@using MoneyManager.Client.ViewModels
@using Newtonsoft.Json
@using System.Globalization
@inject IHttpRecordService _httpService
@inject NameOfSubpage nameOfSubpage
@inject ErrorMessage errorMessage

<PageTitle>Recurring records</PageTitle>

@if (_getTableLoading)
{
    <p><em>Loading...</em></p>
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (_listOfRecurringRecords.Count == 0)
{
    <p>The table is empty, you can add a new record <a href="addrecord">here</a></p>
}
else
{
    <div class="d-none d-md-block">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th width="25%">
                        <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(RecordField.IsActive))">Status @_str[(int)RecordField.IsActive]</button>
                    </th>
                    <th width="25%">
                        <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(RecordField.Name))">Name @_str[(int)RecordField.Name]</button>
                    </th>
                    <th width="15%">
                        <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(RecordField.Amount))">Amount @_str[(int)RecordField.Amount]</button>
                    </th>
                    <th width="25%">
                        <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(RecordField.NextDate))">Next date @_str[(int)RecordField.NextDate]</button>
                    </th>
                    <th width="5%">
                        <div></div>
                    </th>
                    <th width="5%">
                        <div></div>
                    </th>
                    <th width="5%">
                        <div></div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (_listOfRecurringRecords != null)
                {
                    @foreach (var item in _listOfRecurringRecords)
                    {
                        <tr>
                            @if (item.IsActive)
                            {
                                <td class="align-middle" width="25%">Active</td>
                            }
                            else
                            {
                                <td class="align-middle" width="25%">Dezactive</td>
                            }
                            <td class="align-middle" width="25%">@item.Name</td>
                            <td class="align-middle" width="15%">@item.Amount.ToString()</td>
                            <td class="align-middle" width="25%">@item.NextDate.ToString("dd/MM/yyyy")</td>
                            <td class="align-middle" width="5%">
                                <RecordPreviewHover RecurringRecordVM="item">
                                    <button class="btn btn-outline-secondary btn-sm align-middle" @onclick="@(x => OpenRecordPreview(item))">Details</button>
                                </RecordPreviewHover>
                            </td>
                            <td class="align-middle" width="5%">
                                <button class="btn btn-outline-secondary btn-sm align-middle" @onclick="@(x => OpenEditForm(item))">Edit</button>
                            </td>
                            <td class="align-middle" width="5%">
                                <button class="btn-close" @onclick="@(x => { _recordToDelete = item; _deleteDialogOpen = true; StateHasChanged(); })"></button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>Summary (active only):</td>
                    <td></td>
                    <td>@_listOfRecurringRecords?.Where(x => x.IsActive == true).Sum(x => x.Amount).ToString()</td>
                </tr>
            </tfoot>
        </table>
    </div>

    //Mobile
    <div class="d-md-none text-table">
        <div class="d-flex flex-row align-items-center py-2">
            <h5>Sort by:</h5>
            <div width="20%" class="ms-2">
                <Dropdown>
                    <DropdownToggle Outline Color="Color.Info">@_sortBy</DropdownToggle>
                    <DropdownMenu>
                        <DropdownItem @onclick="@(() => {SortButtonClick(RecordField.IsActive); _sortBy = $"Status {_str[(int)RecordField.IsActive]}";})">Status</DropdownItem>
                        <DropdownItem @onclick="@(() => {SortButtonClick(RecordField.Name); _sortBy = $"Name {_str[(int)RecordField.Name]}";})">Name</DropdownItem>
                        <DropdownItem @onclick="@(() => {SortButtonClick(RecordField.Amount); _sortBy = $"Amount {_str[(int)RecordField.Amount]}";})">Amout</DropdownItem>
                        <DropdownItem @onclick="@(() => {SortButtonClick(RecordField.TransactionDate); _sortBy = $"Next date {_str[(int)RecordField.TransactionDate]}";})">Next date</DropdownItem>
                    </DropdownMenu>
                </Dropdown>
            </div>
        </div>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th width="20%">Status</th>
                    <th width="56%">Name</th>
                    <th width="7%">Amount</th>
                    <th width="13%">Next date</th>
                    <th width="4%"></th>
                </tr>
            </thead>
            <tbody>
                @if (_listOfRecurringRecords != null)
                {
                    @foreach (var item in _listOfRecurringRecords)
                    {
                        <tr>
                            @if (item.IsActive)
                            {
                                <td class="align-middle" width="25%">Active</td>
                            }
                            else
                            {
                                <td class="align-middle" width="25%">Dezactive</td>
                            }
                            <td class="align-middle">@item.Name</td>
                            <td class="align-middle">@item.Amount.ToString()</td>
                            <td class="align-middle">@item.NextDate.ToString("dd/MM/yyyy")</td>
                            <td class="align-middle">
                                <Dropdown>
                                    <DropdownToggle Outline Color="Color.Secondary" Size="Size.Small"></DropdownToggle>
                                    <DropdownMenu>
                                        <DropdownItem @onclick="@(x => OpenRecordPreview(item))">Details</DropdownItem>
                                        <DropdownItem @onclick="@(x => OpenEditForm(item))">Edit</DropdownItem>
                                        <DropdownItem @onclick="@(x => { _recordToDelete = item; _deleteDialogOpen = true; StateHasChanged(); })">Delete</DropdownItem>
                                    </DropdownMenu>
                                </Dropdown>
                            </td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="2">Summary<br/>(active only):</td>
                    
                    <td>@_listOfRecurringRecords?.Where(x => x.IsActive == true).Sum(x => x.Amount).ToString()</td>
                </tr>
            </tfoot>
        </table>
    </div>

    @if (RecordPreviewOpen)
    {
        <RecordPreviewDialog Title="Recurring record preview" TypeD="RecordPreviewDialog.TypeOfDialog.RecurringRecord" RecurrinRecordVM="_recordPreview" OnClose="CloseRecordPreview"></RecordPreviewDialog>
    }

    @if (_deleteDialogOpen)
    {
        <ConfirmDeleteDialog
            DialogType="ConfirmDeleteDialog.ModalDialogType.DeleteCancel"
            EventCallbacks="OnCloseDeleteDialog"
            UriDelete="/api/recurring/"
            IdRecordToDelete="_recordToDelete?.Id"
            Title="Are you sure?"
            Text=@($"Do you want delete this: {_recordToDelete?.Name}?")>
        </ConfirmDeleteDialog>
    }

    @if (EditFormOpen && _editRecord != null)
    {
        <RecordFormDialog Title="Edit Recurring Record" OnClose="CloseEditForm" RecurringRecordItem="ReturnedRecord" RecurringRecordToFill="_editRecord" TypeOfDialog="TypeOfFormlDialog.EditRecurringRecord" RecurringRecordsPanel="false"></RecordFormDialog>
    }
}

@code {
    private List<RecurringRecordVM> _listOfRecurringRecords = new();
    private List<CategoryVM> _listOfCategories = new();
    private string[] _str = { "", "", "", "", "", "" }; //caused number of types in enum for Record and RecurringRecord
    private string _sortBy = "";
    private RecordField? _sortClickDesc = null;
    private bool _getTableLoading = true;
    private RecurringRecordVM? _editRecord = null;
    private bool EditFormOpen { get; set; }
    private RecurringRecordVM? _recordPreview = null;
    private bool RecordPreviewOpen { get; set; }
    private bool _deleteDialogOpen = false;
    private RecurringRecordVM? _recordToDelete;

    private List<EventCallback> OnCloseDeleteDialog { get; set; }

    private void OpenRecordPreview(RecurringRecordVM recurringRecord)
    {
        _recordPreview = recurringRecord;
        RecordPreviewOpen = true;
        StateHasChanged();
    }

    private void CloseRecordPreview(bool editConfirmed)
    {
        RecordPreviewOpen = false;
        _recordPreview = null;
        StateHasChanged();
    }

    private void ReturnedRecord(RecurringRecordVM RecordVM)
    {
        _editRecord = RecordVM;
    }

    private void OpenEditForm(RecurringRecordVM record)
    {
        EditFormOpen = true;
        _editRecord = record;
        StateHasChanged();
    }

    private async Task CloseEditForm(bool editConfirmed)
    {
        if (editConfirmed && _editRecord != null)
        {
            await Update();
        }
        _editRecord = null;
        await GetRecurringRecord();
        StateHasChanged();
    }

    private void SortButtonClick(RecordField sortBy)
    {
        SortArrayService.SortByType<RecurringRecordVM>(sortBy, _sortClickDesc == sortBy, ref _listOfRecurringRecords, ref _str);
        if (_sortClickDesc == sortBy)
            _sortClickDesc = null;
        else
            _sortClickDesc = sortBy;
    }

    private async Task Update()
    {
        try
        {
            if (_editRecord == null) return;
            var response = await _httpService.UpdateItem(_editRecord, "/api/recurring");
            if (response == null) return;
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                errorMessage.Message = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage.Message = ex.Message;
        }
    }

    private async Task GetRecurringRecord()
    {
        try
        {
            var responseMessage = await _httpService.GetListOfItems("api/recurring");
            if (responseMessage == null) return;
            if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _listOfRecurringRecords = JsonConvert.DeserializeObject<List<RecurringRecordVM>>(jsonResponse) ?? new List<RecurringRecordVM>();
            }
            else
                errorMessage.Message = await responseMessage.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            errorMessage.Message = ex.Message;
        }

        await GetCategoriesForRecurringRecords();

        _sortClickDesc = null;
        SortButtonClick(RecordField.NextDate);
        _sortBy = "Next date " + _str[(int)RecordField.TransactionDate];

        _getTableLoading = false;

        StateHasChanged();
    }

    private async Task GetCategoriesForRecurringRecords()
    {
        try
        {
            var responseMessage = await _httpService.GetListOfItems("api/category");
            if (responseMessage == null) return;
            if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _listOfCategories = JsonConvert.DeserializeObject<List<CategoryVM>>(jsonResponse) ?? new List<CategoryVM>();
            }
            else
                errorMessage.Message = await responseMessage.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            errorMessage.Message = ex.Message;
        }

        foreach (var record in _listOfRecurringRecords)
        {
            record.CategoryName = _listOfCategories.FirstOrDefault(x => x.Id == record.CategoryId)?.Name;
        }

        //var recordsWithCategories =
        //from record in _listOfRecurringRecords
        //join category in _listOfCategories on record.CategoryId equals category.Id into ps
        //from supCategory in ps.DefaultIfEmpty()
        //select new RecurringRecordVM
        //    {
        //        Id = record.Id,
        //        Name = record.Name,
        //        CategoryName = supCategory.Name,
        //        Amount = record.Amount,
        //        TransactionDate = record.TransactionDate,
        //        CategoryId = record.CategoryId,
        //        IsActive = record.IsActive,
        //        NextDate = record.NextDate,
        //        RepeatEveryDayOfMonth = record.RepeatEveryDayOfMonth

        //    };

        //_listOfRecurringRecords = recordsWithCategories.ToList();

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        nameOfSubpage.NamesOfSubpage = NamesOfSubpageEnum.RecurringRecords;
        errorMessage.Message = null;
        await GetRecurringRecord();

        OnCloseDeleteDialog = new List<EventCallback>
        {
            EventCallback.Factory.Create(this, GetRecurringRecord),
            EventCallback.Factory.Create(this,  x => _deleteDialogOpen = false),
            EventCallback.Factory.Create(this,  x => _recordToDelete = null)
        };
    }
}