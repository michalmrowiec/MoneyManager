@page "/tracker"
@using MoneyManager.Client.Models
@using MoneyManager.Client.Services
@using MoneyManager.Client.Services.XlsxFileService
@using MoneyManager.Client.Components
@using MoneyManager.Client.ViewModels
@using Newtonsoft.Json
@using System.Linq
@using System.Globalization
@using System.Net.Http.Headers
@using System.Text
@using System.IO
@inject HttpClient http
@inject IJSRuntime JS
@inject ILocalStorageService _localStorage
@inject IHttpRecordService _httpTracker
@inject NameOfSubpage nameOfSubpage

<PageTitle>Financial dashboard</PageTitle>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3 mb-0">@_errorMessage</div>
}

@if (_getTableLoading)
{
    <div class="vh-100 d-flex align-items-center justify-content-center gap-3">
        <div class="h2">Loading</div>
        <div class="h5 spinner-border"></div>
    </div>
}
else if (_listOfRecords.Count is 0 && _listOfRecordsTemp.Count is 0)
{
    <p>The table is empty, you can add a new record <a href="/addrecord">here</a></p>
}
else
{
    @*    <Field Horizontal>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-Text="_serach" @onkeypress="@( async () =>
                {
                    if(_serach != String.Empty)
                    {
                        _listOfRecords = _listOfRecordsTemp.Where(x => x.Name.Contains(_serach)).ToList();
                    }
                    else
                    {
                        await GetTable();
                    }
                    StateHasChanged();
                }
            )" Placeholder="Search..." />
        </FieldBody>
    </Field>*@

    @*    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.Is2">All Records</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10" Margin="Margin.IsAuto">
            <Check TValue="bool" />
        </FieldBody>
    </Field>*@

    <div class="d-flex justify-content-between d-none d-md-flex">
        <div class="d-flex flex-row align-items-center">
            <h5>Select date:</h5>
            <div width="20%" class="ms-2">
                <select class="form-select" @bind="SelectedYearByUser">
                    @foreach (var item in _listOfYearsForSelect)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>
            <div width="20%" class="ms-2">
                <select class="form-select" @bind="SelectedMonthByUser">
                    @foreach (var month in _listOfMonthsForSelect)
                    {
                        <option value="@month">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month)</option>
                    }
                </select>
            </div>
        </div>
        <div class="">
            <select class="form-select" @bind="@TableViewSelected">
                <option value="@TableView.ExpensesAndIncomes">All</option>
                <option value="@TableView.OnlyExpenses">Expenses</option>
                <option value="@TableView.OnlyIncomes">Incomes</option>
            </select>
        </div>
    </div>

    <div class="d-none d-md-block">
        <table class="table table-sm table-striped">
            <thead>
                <tr>
                    <th width="25%">
                        <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(TypesInRecord.Name))">
                            Name @_str[(int)TypesInRecord.Name]
                        </button>
                    </th>
                    <th width="25%">
                        <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(TypesInRecord.CategoryName))">
                            Category @_str[(int)TypesInRecord.CategoryName]
                        </button>
                    </th>
                    <th width="15%">
                        <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(TypesInRecord.Amount))">
                            Amout @_str[(int)TypesInRecord.Amount]
                        </button>
                    </th>
                    <th width="25%">
                        <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(TypesInRecord.TransactionDate))">
                            Date @_str[(int)TypesInRecord.TransactionDate]
                        </button>
                    </th>
                    <th width="5%">
                        <div></div>
                    </th>
                    <th width="5%">
                        <div></div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (_listOfRecords != null)
                {
                    @foreach (var item in _listOfRecords.Where(x => x.TransactionDate.Year == _selectedYearByUser && x.TransactionDate.Month == _selectedMonthByUser).ToList())
                    {
                        if (item.Amount > 0)
                        {
                            _colorOfTableRow = "green";
                        }
                        else
                        {
                            _colorOfTableRow = "red";
                        }

                        <tr class="text-color" style="color:@_colorOfTableRow;">
                            <td class="align-middle" width="25%">@item.Name</td>
                            <td class="align-middle" width="25%">@item.Category.Name</td>
                            <td class="align-middle" width="15%">@item.Amount.ToString()</td>
                            <td class="align-middle" width="25%">@item.TransactionDate.ToString("dd/MM/yyyy")</td>
                            <td class="align-middle" width="5%">
                                <button class="btn btn-outline-secondary btn-sm align-middle" @onclick="@(x => OpenEditForm(item))">Edit</button>
                            </td>
                            <td class="align-middle" width="5%">
                                <button class="btn-close" @onclick="@(x => OpenDeleteDialog(item))"></button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>Monthly summary:</td>
                    <td></td>
                    <td>@_sumOfMonthlyAmounts.ToString()</td>
                </tr>
                <tr>
                    <td>Total summary:</td>
                    <td></td>
                    <td>@_sumOfTotalAmounts.ToString()</td>
                </tr>
            </tfoot>
        </table>
    </div>

    //Mobile
    <div class="d-md-none text-table">
        <div class="d-flex pb-2">
            <select class="form-select form-select-sm" @bind="@TableViewSelected">
                <option value="@TableView.ExpensesAndIncomes">All</option>
                <option value="@TableView.OnlyExpenses">Expenses</option>
                <option value="@TableView.OnlyIncomes">Incomes</option>
            </select>
        </div>
        <div class="d-flex flex-row align-items-center">
            <h5>Select date:</h5>
            <div width="20%" class="ms-2">
                <select class="form-select" @bind="SelectedYearByUser">
                    @foreach (var item in _listOfYearsForSelect)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>
            <div width="20%" class="ms-2">
                <select class="form-select" @bind="SelectedMonthByUser">
                    @foreach (var month in _listOfMonthsForSelect)
                    {
                        <option value="@month">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month)</option>
                    }
                </select>
            </div>
        </div>
        <div class="d-flex flex-row align-items-center py-2">
            <h5>Sort by:</h5>
            <div width="20%" class="ms-2">
                <Dropdown>
                    <DropdownToggle Outline Color="Color.Info">@_sortBy</DropdownToggle>
                    <DropdownMenu>
                        <DropdownItem @onclick="@(() => {SortButtonClick(TypesInRecord.Name); _sortBy = $"Name {_str[(int)TypesInRecord.Name]}";})">Name</DropdownItem>
                        <DropdownItem @onclick="@(() => {SortButtonClick(TypesInRecord.CategoryName); _sortBy = $"Category {_str[(int)TypesInRecord.CategoryName]}";})">Category</DropdownItem>
                        <DropdownItem @onclick="@(() => {SortButtonClick(TypesInRecord.Amount); _sortBy = $"Amount {_str[(int)TypesInRecord.Amount]}";})">Amout</DropdownItem>
                        <DropdownItem @onclick="@(() => {SortButtonClick(TypesInRecord.TransactionDate); _sortBy = $"Date {_str[(int)TypesInRecord.TransactionDate]}";})">Date</DropdownItem>
                    </DropdownMenu>
                </Dropdown>
            </div>
        </div>

        <table class="table table-sm table-striped">
            <thead>
                <tr>
                    <th width="51%">Name</th>
                    <th width="30%">Category</th>
                    <th width="7%">Amount</th>
                    <th width="8%">Date</th>
                    <th width="4%"></th>
                </tr>
            </thead>
            <tbody>
                @if (_listOfRecords != null)
                {
                    @foreach (var item in _listOfRecords.Where(x => x.TransactionDate.Year == _selectedYearByUser && x.TransactionDate.Month == _selectedMonthByUser).ToList())
                    {
                        if (item.Amount > 0)
                        {
                            _colorOfTableRow = "green";
                        }
                        else
                        {
                            _colorOfTableRow = "red";
                        }

                        <tr class="text-color" style="color:@_colorOfTableRow;">
                            <td class="align-middle" width="51%">@item.Name</td>
                            <td class="align-middle" width="30%">@item.Category.Name</td>
                            <td class="align-middle" width="7%">@item.Amount.ToString()</td>
                            <td class="align-middle" width="8%">@item.TransactionDate.ToString("dd/MM")</td>
                            <td class="align-middle" width="4%">
                                <Dropdown>
                                    <DropdownToggle Outline Color="Color.Secondary" Size="Size.Small"></DropdownToggle>
                                    <DropdownMenu>
                                        <DropdownItem @onclick="@(x => OpenEditForm(item))">Edit</DropdownItem>
                                        <DropdownItem @onclick="@(x => OpenDeleteDialog(item))">Delete</DropdownItem>
                                    </DropdownMenu>
                                </Dropdown>
                            </td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>Monthly summary:</td>
                    <td></td>
                    <td>@_sumOfMonthlyAmounts.ToString()</td>
                </tr>
                <tr>
                    <td>Total summary:</td>
                    <td></td>
                    <td>@_sumOfTotalAmounts.ToString()</td>
                </tr>
            </tfoot>
        </table>
    </div>

    <button class="btn btn-sm btn-primary" @onclick="DownloadFileFromStream">
        Download xlsx report
    </button>
}

@if (_deleteDialogOpen && _recordToDelete != null)
{
    <ConfirmDeleteDialog DialogType="ConfirmDeleteDialog.ModalDialogType.DeleteCancel" Title="Are you sure?" Text=@($"Do you want delete this: {_recordToDelete.Name}?") OnClose="@CloseDeleteDialog"></ConfirmDeleteDialog>
}

@if (_editFormOpen && _editRecord != null)
{
    <RecordFormDialog Title="Edit record" OnClose="CloseEditForm" FormRecordItem="ReturnedRecord" RecordToFill="_editRecord" TypeOfDialog="TypeOfFormlDialog.EditRecord"></RecordFormDialog>
}

@code {
    //private string _serach = String.Empty;
    private string? _colorOfTableRow;
    private string? _errorMessage;
    private bool _getTableLoading = true;

    private RecordVM? _recordToDelete;
    private RecordVM? _editRecord = null;

    private bool _deleteDialogOpen;
    private bool _editFormOpen;

    private List<RecordVM> _listOfRecords = new();
    private List<RecordVM> _listOfRecordsTemp = new();

    private List<int> _listOfYearsForSelect = new();
    private List<int> _listOfMonthsForSelect = new();
    private int? _selectedYearByUser;
    private int? _selectedMonthByUser;

    private string[] _str = { "", "", "", "" };
    private string _sortBy = "";
    private TypesInRecord? _sortClickDesc = null;

    private decimal _sumOfMonthlyAmounts = 0;
    private decimal _sumOfTotalAmounts = 0;

    private TableView _tableViewSelected = TableView.ExpensesAndIncomes;

    private int? SelectedYearByUser
    {
        get { return _selectedYearByUser; }
        set
        {
            _selectedYearByUser = value;
            _listOfMonthsForSelect = SortArrayService.GetAllMonthsFromListOfRecords(_listOfRecordsTemp, _selectedYearByUser ?? 0);

            if (_selectedYearByUser == DateTime.Now.Year && _listOfMonthsForSelect.Any(x => x == DateTime.Now.Month))
                SelectedMonthByUser = _listOfMonthsForSelect.First(x => x == (int)DateTime.Now.Month);
            else if (_selectedYearByUser == DateTime.Now.Year)
                SelectedMonthByUser = _listOfMonthsForSelect.LastOrDefault();
            else
                SelectedMonthByUser = _listOfMonthsForSelect.FirstOrDefault();
        }
    }
    private int? SelectedMonthByUser
    {
        get { return _selectedMonthByUser; }
        set
        {
            _selectedMonthByUser = value;
            UpdateSummary();
        }
    }

    private TableView TableViewSelected
    {
        get { return _tableViewSelected; }
        set
        {
            _tableViewSelected = value;

            switch (_tableViewSelected)
            {
                case TableView.OnlyExpenses:
                    _listOfRecords = _listOfRecordsTemp.Where(x => x.Amount < 0).ToList();
                    UpdateSummary();
                    break;
                case TableView.OnlyIncomes:
                    _listOfRecords = _listOfRecordsTemp.Where(x => x.Amount >= 0).ToList();
                    UpdateSummary();
                    break;
                default:
                    _listOfRecords = _listOfRecordsTemp;
                    UpdateSummary();
                    break;
            }
        }
    }

    private void ReturnedRecord(RecordVM recordVM)
    {
        _editRecord = recordVM;
    }

    // TODO: Poukładaj to please

    private async Task GetTotalSummary()
    {
        try
        {
            var responseMessage = await _httpTracker.GetListOfItems("/api/stat/total/");
            if (responseMessage == null) return;
            if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _sumOfTotalAmounts = JsonConvert.DeserializeObject<decimal>(jsonResponse);
            }
            else
                _errorMessage = await responseMessage.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

        StateHasChanged();
    }

    private void UpdateSummary()
    {
        _sumOfMonthlyAmounts = 0;
        foreach (var item in _listOfRecords.Where(x => x.TransactionDate.Year == _selectedYearByUser && x.TransactionDate.Month == _selectedMonthByUser).ToList())
        {
            _sumOfMonthlyAmounts += item.Amount;
        }
    }

    private void SortButtonClick(TypesInRecord sortBy)
    {
        SortArrayService.SortByType(sortBy, _sortClickDesc == sortBy, ref _listOfRecords, ref _str);
        if (_sortClickDesc == sortBy)
            _sortClickDesc = null;
        else
            _sortClickDesc = sortBy;
    }

    #region Delete dialog
    private async Task CloseDeleteDialog(bool deleteConfirmed)
    {
        if (deleteConfirmed && _recordToDelete != null)
        {
            await Delete(_recordToDelete.Id);
        }
        _deleteDialogOpen = false;
        await GetTable(_selectedYearByUser, _selectedMonthByUser);
        StateHasChanged();
    }

    private void OpenDeleteDialog(RecordVM record)
    {
        _deleteDialogOpen = true;
        _recordToDelete = record;
        StateHasChanged();
    }
    #endregion

    #region Edit form
    private async Task CloseEditForm(bool editConfirmed)
    {
        _deleteDialogOpen = false;
        if (editConfirmed && _editRecord != null)
        {
            await Update();
        }
        await GetTable(_selectedYearByUser, _selectedMonthByUser);
        _editRecord = null;
        StateHasChanged();
    }

    private void OpenEditForm(RecordVM record)
    {
        _editFormOpen = true;
        _editRecord = record;
        StateHasChanged();
    }
    #endregion

    private async Task GetTable(int? selectedYear = null, int? selectedMonth = null)
    {
        try
        {
            var responseMessage = await _httpTracker.GetListOfItems("/api/tracker/");
            if (responseMessage == null) return;
            if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _listOfRecords = JsonConvert.DeserializeObject<List<RecordVM>>(jsonResponse) ?? new List<RecordVM>();
            }
            else
                _errorMessage = await responseMessage.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

        if (_listOfRecords == null) return;

        _listOfRecordsTemp = _listOfRecords;

        switch (_tableViewSelected)
        {
            case TableView.OnlyExpenses:
                _listOfRecords = _listOfRecordsTemp.Where(x => x.Amount < 0).ToList();
                break;
            case TableView.OnlyIncomes:
                _listOfRecords = _listOfRecordsTemp.Where(x => x.Amount >= 0).ToList();
                break;
        }

        if (_editRecord is null)
        {
            _listOfYearsForSelect = SortArrayService.GetAllYearsFromListOfRecords(_listOfRecords);
            SelectedYearByUser = _listOfYearsForSelect.FirstOrDefault();
        }

        if (selectedYear is not null && _listOfYearsForSelect.Any(x => x == selectedYear))
            if (selectedMonth is not null && _listOfMonthsForSelect.Any(x => x == selectedMonth))
            {
                SelectedYearByUser = selectedYear;
                SelectedMonthByUser = selectedMonth;
            }

        _sortClickDesc = null;
        SortButtonClick(TypesInRecord.TransactionDate);
        _sortBy = "Date " + _str[(int)TypesInRecord.TransactionDate];

        _getTableLoading = false;

        UpdateSummary();
        await GetTotalSummary();

        StateHasChanged();
    }

    private async Task Delete(int id)
    {
        try
        {
            var response = await _httpTracker.DeleteItem(id, "/api/tracker/");
            if (response == null) return;
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
                _errorMessage = await response.Content.ReadAsStringAsync();

        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private async Task Update()
    {
        try
        {
            if (_editRecord == null) return;
            var response = await _httpTracker.UpdateItem(_editRecord, "/api/tracker/");
            if (response == null) return;
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                _errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        nameOfSubpage.NamesOfSubpage = NamesOfSubpageEnum.FinancialDashboard;
        _errorMessage = null;
        await GetTable();
    }

    #region Xlsx report file generate
    private Stream GetFileStream()
    {
        XmlReportGenerateService xmlGenerateService = new();

        var randomBinaryData = xmlGenerateService.CreateXmlDoc(_listOfRecords.Where(x => x.TransactionDate.Year == _selectedYearByUser && x.TransactionDate.Month == _selectedMonthByUser).ToList());
        var fileStream = new MemoryStream(randomBinaryData);

        return fileStream;
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = GetFileStream();
        var fileName = $"Report_{DateTime.Today.ToString("Y")}.xlsx";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
    #endregion

    enum TableView
    {
        OnlyExpenses,
        OnlyIncomes,
        ExpensesAndIncomes
    }
}