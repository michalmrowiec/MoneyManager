@page "/tracker"
@using MoneyManager.Client.Components.AddEditRecord;
@using MoneyManager.Client.Models
@using MoneyManager.Client.Models.ViewModels;
@using MoneyManager.Client.Services
@using MoneyManager.Client.Services.XlsxFileService
@using MoneyManager.Client.Components
@using MoneyManager.Client.ViewModels
@using Newtonsoft.Json
@using System.Linq
@using System.Globalization
@using System.Net.Http.Headers
@using System.Text
@using System.IO
@inject IJSRuntime JS
@inject ILocalStorageService _localStorage
@inject IHttpRecordService httpService
@inject IDisplayService displayService
@inject NameOfSubpage nameOfSubpage
@inject ErrorMessage errorMessage
@inject RecordFormDialogEventHelper recordFormDialogEventHelper

<PageTitle>Financial dashboard</PageTitle>

@if (_getTableLoading)
{
    <div class="vh-100 d-flex align-items-center justify-content-center gap-3">
        <div class="h2">Loading</div>
        <div class="h5 spinner-border"></div>
    </div>
}
else if (_listOfRecords.Count is 0 && _listOfRecordsTemp.Count is 0)
{
    <p>The table is empty, you can add a new record <a href="/addrecord">here</a></p>
}
else
{
    <div class="">
        <div class="d-flex flex-row align-items-center">
            <h5>Select date:</h5>
            <div width="20%" class="ms-2">
                <Dropdown>
                    <DropdownToggle Outline Color="Color.Info">@_filterParameters.Year</DropdownToggle>
                     <DropdownMenu>
                         @foreach (var year in _listOfYearsForSelect)
                        {
                            <DropdownItem @onclick="@(async () => { _filterParameters.Year = year; await GetTable(); })">@year</DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            </div>
            <div width="20%" class="ms-2">
                <Dropdown>
                    <DropdownToggle Outline Color="Color.Info">@displayService.DisplayMonth(_filterParameters.Month)</DropdownToggle>
                     <DropdownMenu>
                         @foreach (var month in _listOfMonthsForSelect)
                        {
                            <DropdownItem @onclick="@(async () => { _filterParameters.Month = month; await GetTable(); })">@displayService.DisplayMonth(month)</DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            </div>
        </div>
        <div class="d-flex flex-row align-items-center py-2">
            <h5>Type of record:</h5>
            <div width="20%" class="ms-2">
                <Dropdown>
                    <DropdownToggle Outline Color="Color.Info">@_filterParameters.TypeOfRecord</DropdownToggle>
                     <DropdownMenu>
                         <DropdownItem @onclick="@(() => { _filterParameters.TypeOfRecord = TypeOfRecord.All; LaunchFilter(); })">All</DropdownItem>
                         <DropdownItem @onclick="@(() => { _filterParameters.TypeOfRecord = TypeOfRecord.Incomes; LaunchFilter(); })">Incomes</DropdownItem>
                         <DropdownItem @onclick="@(() => { _filterParameters.TypeOfRecord = TypeOfRecord.Expenses; LaunchFilter(); })">Expenses</DropdownItem>
                     </DropdownMenu>
                 </Dropdown>
             </div>
         </div>
         <div class="d-flex flex-row align-items-center py-2">
             <h5>Sort by:</h5>
             <div width="20%" class="ms-2">
                 <Dropdown>
                     <DropdownToggle Outline Color="Color.Info">@_sortBy</DropdownToggle>
                     <DropdownMenu>
                         <DropdownItem @onclick="@(() => {SortButtonClick(RecordField.Name); _sortBy = $"Name {_str[(int)RecordField.Name]}";})">Name</DropdownItem>
                         <DropdownItem @onclick="@(() => {SortButtonClick(RecordField.CategoryName); _sortBy = $"Category {_str[(int)RecordField.CategoryName]}";})">Category</DropdownItem>
                         <DropdownItem @onclick="@(() => {SortButtonClick(RecordField.Amount); _sortBy = $"Amount {_str[(int)RecordField.Amount]}";})">Amout</DropdownItem>
                         <DropdownItem @onclick="@(() => {SortButtonClick(RecordField.TransactionDate); _sortBy = $"Date {_str[(int)RecordField.TransactionDate]}";})">Date</DropdownItem>
                     </DropdownMenu>
                 </Dropdown>
             </div>
         </div>
         <div class="d-flex flex-row align-items-center py-2">
             <h5>Category filter:</h5>
             <div width="20%" class="ms-2">
                 <Dropdown>
                     <DropdownToggle Outline Color="Color.Info">@_selectedCategory.Name</DropdownToggle>
                     <DropdownMenu>
                         <DropdownItem @onclick="@(() => { _filterParameters.CategoryId = 0; LaunchFilter(); _selectedCategory = new CategoryVM { Id = 0, Name = "All category" }; SortButtonClick(RecordField.TransactionDate); StateHasChanged(); })">All category</DropdownItem>
                         @foreach (var category in _listOfRecordsTemp.Select(r => new CategoryVM { Id = r.CategoryId ?? 0, Name = r.Category?.Name ?? "" }).DistinctBy(c => c.Name))
                        {
                            <DropdownItem @onclick="@(() => { _filterParameters.CategoryId = category.Id; LaunchFilter(); _selectedCategory = category; SortButtonClick(RecordField.Amount); StateHasChanged(); })">@category.Name</DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            </div>
        </div>
    </div>

    <div class="">
        <table class="table table-sm table-striped">
            <thead>
                <tr class="d-none d-md-table-row">
                    <th width="25%">Name</th>
                    <th width="25%">Category</th>
                    <th width="15%">Amount</th>
                    <th width="25%">Date</th>
                    <th width="5%"></th>
                    <th width="5%"></th>
                </tr>
                <tr class="d-md-none">
                    <th width="51%">Name</th>
                    <th width="30%">Category</th>
                    <th width="7%">Amount</th>
                    <th width="8%">Date</th>
                    <th width="4%"></th>
                </tr>
            </thead>
            <tbody>
                @if (_listOfRecords != null)
                {
                    @foreach (var item in _listOfRecords.Where(x => x.TransactionDate.Year == _filterParameters.Year && x.TransactionDate.Month == _filterParameters.Month).ToList())
                    {
                        string colorOfTableRow;

                        if (item.Amount > 0)
                        {
                            colorOfTableRow = "green";
                        }
                        else
                        {
                            colorOfTableRow = "red";
                        }

                        <tr class="text-color" style="color:@colorOfTableRow;">
                            <td class="align-middle">@item.Name</td>
                            <td class="align-middle">@item.Category?.Name</td>
                            <td class="align-middle">@item.Amount.ToString()</td>
                            <td class="align-middle">@item.TransactionDate.ToString("dd/MM/yyyy")</td>
                            <td class="align-middle d-none d-md-table-cell">
                                <button class="btn btn-outline-secondary btn-sm align-middle" @onclick="@(x => OpenEditRecordForm(item))">Edit</button>
                            </td>
                            <td class="align-middle d-none d-md-table-cell" width="5%">
                                <button class="btn-close" @onclick="@(x => { _recordToDelete = item; _deleteDialogOpen = true; StateHasChanged(); })"></button>
                            </td>
                            <td class="align-middle d-md-none">
                                <Dropdown>
                                    <DropdownToggle Outline Color="Color.Secondary" Size="Size.Small"></DropdownToggle>
                                     <DropdownMenu>
                                         <DropdownItem @onclick="@(x => OpenEditRecordForm(item))">Edit</DropdownItem>
                                         <DropdownItem @onclick="@(x => { _recordToDelete = item; _deleteDialogOpen = true; StateHasChanged(); })">Delete</DropdownItem>
                                     </DropdownMenu>
                                 </Dropdown>
                             </td>
                         </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>Monthly summary:</td>
                    <td></td>
                    <td>@_sumOfMonthlyAmounts.ToString()</td>
                </tr>
                <tr>
                    <td>Total summary:</td>
                    <td></td>
                    <td>@_sumOfTotalAmounts.ToString()</td>
                </tr>
            </tfoot>
        </table>
    </div>

    <button class="btn btn-sm btn-primary mb-2" @onclick="DownloadFileFromStream">
        Download xlsx report
    </button>
}

@if (_deleteDialogOpen)
{
    <ConfirmDeleteDialog DialogType="ConfirmDeleteDialog.ModalDialogType.DeleteCancel"
                         EventCallbacks="OnCloseDeleteDialog"
                         UriDelete="/api/tracker/"
                         IdRecordToDelete="_recordToDelete?.Id"
                         Title="Are you sure?"
                         Text=@($"Do you want delete this: {_recordToDelete?.Name}?")>
    </ConfirmDeleteDialog>
}

@code {
    private bool _getTableLoading = true;

    private RecordVM? _recordToDelete;

    private List<EventCallback>? OnCloseDeleteDialog { get; set; }

    private bool _deleteDialogOpen;

    private List<RecordVM> _listOfRecords = new();
    private List<RecordVM> _listOfRecordsTemp = new();

    private List<int> _listOfYearsForSelect = new();
    private List<int> _listOfMonthsForSelect = new();

    private string[] _str = { "", "", "", "" };
    private string _sortBy = "";
    private RecordField? _sortClickDesc = null;

    private Dictionary<int, List<int>> _yearsWithMonths = new();
    private FilterParameters _filterParameters = new();

    private CategoryVM _selectedCategory = new CategoryVM { Id = 0, Name = "All category" };

    private decimal _sumOfMonthlyAmounts = 0;
    private decimal _sumOfTotalAmounts = 0;

    private List<EventCallback>? OnCloseRecordDialog { get; set; }

    private void OpenEditRecordForm(RecordVM item)
    {
        recordFormDialogEventHelper.TypeOfDialog = RecordFormDialogEventHelper.TypeOfAddEditFormDialog.EditRecord;
        recordFormDialogEventHelper.RecordToEdit = new FormRecordModel
            {
                Id = item.Id,
                Name = item.Name,
                Amount = item.Amount,
                TransactionDate = item.TransactionDate,
                CategoryId = item.CategoryId
            };
        recordFormDialogEventHelper.AddIsOpen = true;
        StateHasChanged();
    }

    // TODO: clean up and sort here

    private async Task GetTotalSummary()
    {
        try
        {
            var responseMessage = await httpService.GetListOfItems("/api/stat/total/");
            if (responseMessage == null) return;
            if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _sumOfTotalAmounts = JsonConvert.DeserializeObject<decimal>(jsonResponse);
            }
            else
                errorMessage.Message = await responseMessage.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            errorMessage.Message = ex.Message;
        }

        StateHasChanged();
    }

    private void UpdateSummary()
    {
        _sumOfMonthlyAmounts = 0;
        foreach (var item in _listOfRecords.Where(x => x.TransactionDate.Year == _filterParameters.Year && x.TransactionDate.Month == _filterParameters.Month).ToList())
        {
            _sumOfMonthlyAmounts += item.Amount;
        }
    }

    private void SortButtonClick(RecordField sortBy)
    {
        SortArrayService.SortByType(sortBy, _sortClickDesc == sortBy, ref _listOfRecords, ref _str);
        if (_sortClickDesc == sortBy)
            _sortClickDesc = null;
        else
            _sortClickDesc = sortBy;
    }

    private async Task GetaYearsWithMonths()
    {
        try
        {
            var respond = await httpService.GetListOfItems("/api/tracker/dates");
            if (respond == null) return;
            if (respond.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var json = await respond.Content.ReadAsStringAsync();
                var yearsWithMonths = JsonConvert.DeserializeObject<Dictionary<int, List<int>>>(json);

                _yearsWithMonths = yearsWithMonths ?? new();

                _listOfYearsForSelect = yearsWithMonths?.Keys.OrderByDescending(x => x).ToList() ?? new();

                if (_filterParameters.Year == 0 || !_listOfYearsForSelect.Any(x => x == _filterParameters.Year))
                {
                    if (_listOfYearsForSelect.Any(x => x == DateTime.Now.Year))
                        _filterParameters.Year = DateTime.Now.Year;
                    else
                        _filterParameters.Year = _listOfYearsForSelect.First();
                }

                _listOfMonthsForSelect = _yearsWithMonths[_filterParameters.Year].ToList();

                if (_listOfMonthsForSelect.Any(x => x == _filterParameters.Month))
                    _filterParameters.Month = _filterParameters.Month;

                else if (_filterParameters.Year == DateTime.Now.Year && _listOfMonthsForSelect.Any(x => x == DateTime.Now.Month))
                    _filterParameters.Month = _listOfMonthsForSelect.First(x => x == (int)DateTime.Now.Month);

                else if (_filterParameters.Year == DateTime.Now.Year)
                    _filterParameters.Month = _listOfMonthsForSelect.Last();

                else
                    _filterParameters.Month = _listOfMonthsForSelect.First();
            }
            else
                errorMessage.Message = respond.Content.ReadAsStringAsync().ToString();
        }
        catch (Exception ex)
        {
            errorMessage.Message = ex.Message;
        }

        StateHasChanged();
    }

    private async Task GetTable()
    {
        await GetaYearsWithMonths();

        try
        {
            var responseMessage = await httpService.GetListOfItems("/api/tracker/");
            if (responseMessage == null) return;
            if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _listOfRecords = JsonConvert.DeserializeObject<List<RecordVM>>(jsonResponse) ?? new List<RecordVM>();
            }
            else
                errorMessage.Message = await responseMessage.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            errorMessage.Message = ex.Message;
        }

        if (_listOfRecords == null) return;

        _listOfRecordsTemp = _listOfRecords;

        if (_filterParameters != null)
            _listOfRecords = SortArrayService.FilterRecordListWithParameters(_listOfRecords, _filterParameters);

        _sortClickDesc = null;
        SortButtonClick(RecordField.TransactionDate);
        _sortBy = "Date " + _str[(int)RecordField.TransactionDate];

        _getTableLoading = false;

        UpdateSummary();
        await GetTotalSummary();

        StateHasChanged();
    }

    private void LaunchFilter()
    {
        _listOfRecords = SortArrayService.FilterRecordListWithParameters(_listOfRecordsTemp, _filterParameters);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        recordFormDialogEventHelper?.FuncsOnClose?.Add(new EventCallback(this, GetTable));

        await httpService.GetListOfItems("api/recurring/ex");

        nameOfSubpage.NamesOfSubpage = NamesOfSubpageEnum.FinancialDashboard;
        errorMessage.Message = null;
        await GetTable();

        OnCloseDeleteDialog = new List<EventCallback>
        {
            EventCallback.Factory.Create(this, GetTable),
            EventCallback.Factory.Create(this,  x => _deleteDialogOpen = false),
            EventCallback.Factory.Create(this,  x => _recordToDelete = null)
        };
    }

    private Stream GetFileStream()
    {
        XmlReportGenerateService xmlGenerateService = new();

        var randomBinaryData = xmlGenerateService.CreateXmlDoc(_listOfRecords.Where(x => x.TransactionDate.Year == _filterParameters.Year && x.TransactionDate.Month == _filterParameters.Month).ToList());
        var fileStream = new MemoryStream(randomBinaryData);

        return fileStream;
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = GetFileStream();
        var fileName = $"Report_{DateTime.Today.ToString("Y")}.xlsx";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}