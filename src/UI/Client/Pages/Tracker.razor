@page "/tracker"
@using MoneyManager.Client.Models
@using MoneyManager.Client.Services
@using MoneyManager.Client.Components
@using MoneyManager.Client.ViewModels
@using Newtonsoft.Json
@using System.Linq
@using System.Globalization
@using System.Net.Http.Headers
@using System.Text
@using System.IO
@inject HttpClient http
@inject IJSRuntime JS
@inject ILocalStorageService _localStorage
@inject IHttpRecordService _httpTracker

<h1>Financial Dashboard</h1>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3 mb-0">@_errorMessage</div>
}

@if (_getTableLoading)
{
    <p><em>Loading...</em></p>
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (_listOfRecords.Count == 0)
{
    <p>The table is empty, you can add a new record <a href="/addrecord">here</a></p>
}
else
{
    <div class="d-flex justify-content-between">
        <div class="d-flex flex-row align-items-center">
            <h5>Select date:</h5>
            <div width="20%" class="ms-2">
                <select class="form-select" @bind="SelectedYearByUser">
                    @foreach (var item in _listOfYearsForSelect)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>
            <div width="20%" class="ms-2">
                <select class="form-select" @bind="SelectedMonthByUser">
                    @foreach (var item in _listOfMonthsForSelect)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>
        </div>

        <div>
            <select class="form-select" @bind="@TableViewSelected">
                <option value="@TableView.ExpensesAndIncomes">Expenses and Incomes</option>
                <option value="@TableView.OnlyExpenses">Expenses</option>
                <option value="@TableView.OnlyIncomes">Incomes</option>
            </select>
        </div>
    </div>


    <table class="table table-striped">
        <thead>
            <tr>
                <th width="25%">
                    <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(TypesInRecord.Name))">
                        Name @_str[(int)TypesInRecord.Name]
                    </button>
                </th>
                <th width="25%">
                    <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(TypesInRecord.CategoryName))">
                        Desc @_str[(int)TypesInRecord.CategoryName]
                    </button>
                </th>
                <th width="15%">
                    <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(TypesInRecord.Amount))">
                        Amout @_str[(int)TypesInRecord.Amount]
                    </button>
                </th>
                <th width="25%">
                    <button class="btn btn-sm btn-outline-info" @onclick="@(x => SortButtonClick(TypesInRecord.TransactionDate))">
                        Date @_str[(int)TypesInRecord.TransactionDate]
                    </button>
                </th>
                <th width="5%">
                    <div></div>
                </th>
                <th width="5%">
                    <div></div>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (_listOfRecords != null)
            {
                @foreach (var item in _listOfRecords.Where(x => x.TransactionDate.ToString("MMMM-yyyy", CultureInfo.GetCultureInfo("en-US")) == _selectedMonthByUser + "-" + _selectedYearByUser).ToList())
                {
                    <tr>
                        <td class="align-middle" width="25%">@item.Name</td>
                        <td class="align-middle" width="25%">@item.CategoryName</td>
                        <td class="align-middle" width="15%">@item.Amount.ToString("C2", CultureInfo.GetCultureInfo("en-US"))</td>
                        <td class="align-middle" width="25%">@item.TransactionDate.ToShortDateString()</td>
                        <td class="align-middle" width="5%">
                            <button class="btn btn-outline-secondary btn-sm align-middle" @onclick="@(x => OpenEditForm(item))">Edit</button>
                        </td>
                        <td class="align-middle" width="5%">
                            <button class="btn-close" @onclick="@(x => OpenDeleteDialog(item))"></button>
                        </td>
                    </tr>
                }
            }
        </tbody>
        <tfoot>
            <tr>
                <td>Summary:</td>
                <td></td>
                <td>@_sumOfMonthlyAmounts.ToString("C2", CultureInfo.GetCultureInfo("en-US"))</td>
            </tr>
        </tfoot>
    </table>

    <button class="btn btn-sm btn-primary" @onclick="DownloadFileFromStream">
        Download xlsx report
    </button>
}

@if (DeleteDialogOpen &&
_recordToDelete != null)
{
    <ConfirmDeleteDialog DialogType="ConfirmDeleteDialog.ModalDialogType.DeleteCancel" Title="Are you sure?" Text=@($"Do you want delete this: {_recordToDelete.Name}?") OnClose="@CloseDeleteDialog"></ConfirmDeleteDialog>
}

@if (EditFormOpen && _editRecord != null)
{
    <RecordFormDialog Title="Edit record" OnClose="CloseEditForm" FormRecordItem="ReturnedRecord" RecordToFill="_editRecord" TypeOfDialog="RecordFormDialog.TypeOfRecordFormlDialog.EditRecord"></RecordFormDialog>
}

@code {
    private string? _errorMessage;
    private RecordVM? _recordToDelete;
    private List<RecordVM> _listOfRecords = new();
    private List<RecordVM> _listOfRecordsTemp = new();
    private List<string> _listOfYearsForSelect = new();
    private List<string> _listOfMonthsForSelect = new();
    private Dictionary<TypesInRecord, string> _setOrderByArrow = new Dictionary<TypesInRecord, string>
    {
        {TypesInRecord.Name, ""},
        {TypesInRecord.CategoryName, ""},
        {TypesInRecord.Amount, ""},
        {TypesInRecord.TransactionDate, ""}
    };
    private string[] _str = { "", "", "", "" };
    private decimal _sumOfMonthlyAmounts = 0;
    private string _selectedYearByUser = String.Empty;
    private string _selectedMonthByUser = String.Empty;
    private RecordVM? _editRecord = null;
    private TypesInRecord? _sortClickDesc = null;
    private bool _getTableLoading = true;
    private TableView _tableViewSelected = TableView.ExpensesAndIncomes;

    private string? SelectedYearByUser
    {
        get { return _selectedYearByUser; }
        set
        {
            _selectedYearByUser = value == null ? String.Empty : value;
            _listOfMonthsForSelect = SortArrayService.GetAllMonthsFromListOfRecords(_listOfRecords, _selectedYearByUser);
            if (_selectedYearByUser == DateTime.Now.ToString("yyyy", CultureInfo.GetCultureInfo("en-US")) &&
                    _listOfMonthsForSelect.FirstOrDefault(x => x == DateTime.Now.ToString("MMMM", CultureInfo.GetCultureInfo("en-US")), String.Empty).ToString() != String.Empty)
                SelectedMonthByUser = _listOfMonthsForSelect.First(x => x == DateTime.Now.ToString("MMMM", CultureInfo.GetCultureInfo("en-US"))).ToString();
            else
                SelectedMonthByUser = _listOfMonthsForSelect.FirstOrDefault(String.Empty);
        }
    }
    private string SelectedMonthByUser
    {
        get { return _selectedMonthByUser; }
        set
        {
            _selectedMonthByUser = value == null ? String.Empty : value;
        }
    }
    private bool DeleteDialogOpen { get; set; }
    private bool EditFormOpen { get; set; }

    private TableView TableViewSelected
    {
        get { return _tableViewSelected; }
        set
        {
            _tableViewSelected = value;

            switch (_tableViewSelected)
            {
                case TableView.OnlyExpenses:
                    _listOfRecords = _listOfRecordsTemp.Where(x => x.Amount < 0).ToList();
                    _sumOfMonthlyAmounts = 0;
                    foreach (var item in _listOfRecords.Where(x => x.TransactionDate.ToString("MMMM-yyyy", CultureInfo.GetCultureInfo("en-US")) == _selectedMonthByUser + "-" + _selectedYearByUser).ToList())
                    {
                        _sumOfMonthlyAmounts += item.Amount;
                    }
                    break;
                case TableView.OnlyIncomes:
                    _listOfRecords = _listOfRecordsTemp.Where(x => x.Amount >= 0).ToList();
                    _sumOfMonthlyAmounts = 0;
                    foreach (var item in _listOfRecords.Where(x => x.TransactionDate.ToString("MMMM-yyyy", CultureInfo.GetCultureInfo("en-US")) == _selectedMonthByUser + "-" + _selectedYearByUser).ToList())
                    {
                        _sumOfMonthlyAmounts += item.Amount;
                    }
                    break;
                default:
                    _listOfRecords = _listOfRecordsTemp;
                    _sumOfMonthlyAmounts = 0;
                    foreach (var item in _listOfRecords.Where(x => x.TransactionDate.ToString("MMMM-yyyy", CultureInfo.GetCultureInfo("en-US")) == _selectedMonthByUser + "-" + _selectedYearByUser).ToList())
                    {
                        _sumOfMonthlyAmounts += item.Amount;
                    }
                    break;
            }
        }
    }

    private void SortButtonClick(TypesInRecord sortBy)
    {
        SortArrayService.SortByType(sortBy, _sortClickDesc == sortBy, ref _listOfRecords, ref _str);
        if (_sortClickDesc == sortBy)
            _sortClickDesc = null;
        else
            _sortClickDesc = sortBy;
    }

    private async Task CloseDeleteDialog(bool deleteConfirmed)
    {
        if (deleteConfirmed && _recordToDelete != null)
        {
            await Delete(_recordToDelete.Id);
        }
        DeleteDialogOpen = false;
        await GetTable();
        StateHasChanged();
    }

    private async void OpenDeleteDialog(RecordVM record)
    {
        DeleteDialogOpen = true;
        _recordToDelete = record;
        await GetTable();
        StateHasChanged();
    }

    private void ReturnedRecord(RecordVM RecordVM)
    {
        _editRecord = RecordVM;
    }

    private async Task CloseEditForm(bool editConfirmed)
    {
        DeleteDialogOpen = false;
        if (editConfirmed && _editRecord != null)
        {
            await Update();
        }
        await GetTable();
        _editRecord = null;
        StateHasChanged();
    }

    private void OpenEditForm(RecordVM record)
    {
        EditFormOpen = true;
        _editRecord = record;
        StateHasChanged();
    }

    private Stream GetFileStream()
    {
        XmlGenerateService xmlGenerateService = new();

        var randomBinaryData = xmlGenerateService.CreateXmlDoc(_listOfRecords.Where(x => x.TransactionDate.ToString("MMMM-yyyy", CultureInfo.GetCultureInfo("en-US")) == _selectedMonthByUser + "-" + _selectedYearByUser).ToList());
        var fileStream = new MemoryStream(randomBinaryData);

        return fileStream;
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = GetFileStream();
        var fileName = $"Report_{DateTime.Today.ToString("Y")}.xlsx";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task GetTable()
    {
        try
        {
            var responseMessage = await _httpTracker.GetListOfItems("/api/tracker/");
            if (responseMessage == null) return;
            if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var jsonResponse = await responseMessage.Content.ReadAsStringAsync();
                _listOfRecords = JsonConvert.DeserializeObject<List<RecordVM>>(jsonResponse) ?? new List<RecordVM>();
            }
            else
                _errorMessage = await responseMessage.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

        if (_listOfRecords == null) return;

        _listOfRecordsTemp = _listOfRecords;

        switch (_tableViewSelected)
        {
            case TableView.OnlyExpenses:
                _listOfRecords = _listOfRecordsTemp.Where(x => x.Amount < 0).ToList();
                break;
            case TableView.OnlyIncomes:
                _listOfRecords = _listOfRecordsTemp.Where(x => x.Amount >= 0).ToList();
                break;
        }

        if (_editRecord is null)
        {
            _listOfYearsForSelect = SortArrayService.GetAllYearsFromListOfRecords(_listOfRecords);
            SelectedYearByUser = _listOfYearsForSelect.FirstOrDefault();
        }

        _sortClickDesc = null;
        SortButtonClick(TypesInRecord.TransactionDate);
        _getTableLoading = false;
        StateHasChanged();

        _sumOfMonthlyAmounts = 0;
        foreach (var item in _listOfRecords.Where(x => x.TransactionDate.ToString("MMMM-yyyy", CultureInfo.GetCultureInfo("en-US")) == _selectedMonthByUser + "-" + _selectedYearByUser).ToList())
        {
            _sumOfMonthlyAmounts += item.Amount;
        }
    }

    private async Task Delete(int id)
    {
        try
        {
            var response = await _httpTracker.DeleteItem(id, "/api/tracker/");
            if (response == null) return;
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
                _errorMessage = await response.Content.ReadAsStringAsync();

        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private async Task Update()
    {
        try
        {
            if (_editRecord == null) return;
            var response = await _httpTracker.UpdateItem(_editRecord, "/api/tracker/");
            if (response == null) return;
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                _errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _errorMessage = null;
        await GetTable();
    }

    enum TableView
    {
        OnlyExpenses,
        OnlyIncomes,
        ExpensesAndIncomes
    }
    }