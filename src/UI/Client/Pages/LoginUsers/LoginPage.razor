@page "/login"
@using MoneyManager.Client.Models.Response
@using MoneyManager.Client.Services
@using MoneyManager.Client.ViewModels
@using Newtonsoft.Json
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject HttpClient http;
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorage
@inject AppState appState
@inject ErrorMessage errorMessage
@inject IHttpRecordService _httpService
@inject NameOfSubpage nameOfSubpage

<PageTitle>Login</PageTitle>

<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Login</h4>
        <div class="card-body">
            <EditForm Model="@_loginUserVM" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="_loginUserVM.Email" class="form-control" />
                    <ValidationMessage For="@(() => _loginUserVM.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="_loginUserVM.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => _loginUserVM.Password)" />
                </div>
                <div class="d-flex justify-content-between">
                    <button class="btn btn-primary mt-2">
                        @if (_loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Login
                    </button>
                    <div class="my-auto">
                        <a href="/forgotpasswordemail">I forgot my password</a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginUserVM _loginUserVM = new LoginUserVM();
    private bool _loading;

    protected override void OnInitialized()
    {
        nameOfSubpage.NamesOfSubpage = NamesOfSubpageEnum.Empty;
        // redirect to home if already logged in i

    }

    private async void HandleValidSubmit()
    {
        _loading = true;
        try
        {
            var result = await http.PostAsJsonAsync("/api/account/login", _loginUserVM);
            //UserTokenVM token = new UserTokenVM();
            //token.Token = await result.Content.ReadAsStringAsync();

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                UserTokenVM userToken = JsonConvert.DeserializeObject<UserTokenVM>(await result.Content.ReadAsStringAsync()) ?? new();
                var tokenHandler = new JwtSecurityTokenHandler();
                userToken.UserId = int.Parse(tokenHandler.ReadJwtToken(userToken.Token).Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
                await _localStorage.SetItem<UserTokenVM>("user", userToken);
                appState.LoggedIn = true;
                navigationManager.NavigateTo("tracker");
                await _httpService.GetListOfItems("api/recurring/ex");
            }
            else
            {
                //error = await result.Content.ReadAsStringAsync();
                var response = await result.Content.ReadAsStringAsync();
                var baseResponse = JsonConvert.DeserializeObject<UserResponse>(response) ?? new();
                errorMessage.Message = baseResponse.Message;
                _loading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage.Message = ex.Message;
            _loading = false;
            StateHasChanged();
        }
    }
}