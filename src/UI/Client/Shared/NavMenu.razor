@using MoneyManager.Client.Services
@using MoneyManager.Client.ViewModels
@inject AppState appState
@inject ILocalStorageService _localStorage
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Money Manager</a>
        <div class="account-btns">
            @if (appState.LoggedIn)
            {
                <div class="me-3">Hello <b>@userName</b></div>
                //<a @onclick="Logout" href="">Logout</a>
            }
            else
            {
                <a href="login">Login</a>
                <a href="register">Register</a>
            }
        </div>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (appState.LoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="addrecord">
                    <span class="oi oi-plus" aria-hidden="true"></span> Add
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="tracker">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Financial Dashboard
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="recurring">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Recurring Records
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="plannedbudgets">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Planned Budgets
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="categories">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Categories
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="settings">
                    <span class="oi oi-cog" aria-hidden="true"></span> Settings
                </NavLink>
            </div>
            <div class="nav-item px-3 account-btns">
                <NavLink class="nav-link" href="Logout" @onclick="Logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link disabled" href="addrecord">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Add
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link disabled" href="tracker">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Tracker
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link disabled" href="categories">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Categories
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        appState.OnChange += ChceckIfLoggedIn;
        appState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        appState.OnChange -= ChceckIfLoggedIn;
        appState.OnChange -= StateHasChanged;
    }

    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        UserTokenVM user = await _localStorage.GetItem<UserTokenVM>("user");
        if (user.Token is not null)
        {
            appState.LoggedIn = true;
        }
    }

    private async void Logout()
    {
        await _localStorage.RemoveItem("user");
        appState.LoggedIn = false;
    }

    private async void ChceckIfLoggedIn()
    {
        UserTokenVM UserTokenVM = await _localStorage.GetItem<UserTokenVM>("user");
        if (UserTokenVM is not null)
        {
            userName = UserTokenVM.Name;
        }
        else
            userName = null;
        StateHasChanged();
    }
}
