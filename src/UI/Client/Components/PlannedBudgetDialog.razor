@using MoneyManager.Client.Services
@using System.Net.Http.Headers
@using Newtonsoft.Json
@using MoneyManager.Client.ViewModels
@using static MoneyManager.Client.Components.RecordFormDialog
@inject IHttpRecordService _httpService

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="btn-close" @onclick="@ModalCancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@formRecordItem" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="d-flex align-items-center justify-content-between mb-2">
                        <div class="flex-fill me-2">
                            @if (_loadingCategories)
                            {
                                <div class="d-flex align-items-center">
                                    <strong>Loading...</strong>
                                    <div class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></div>
                                </div>
                            }
                            else
                            {
                                <InputSelect class="form-select" @bind-Value="SelectedCategory">
                                    @foreach (var item in _categories)
                                    {
                                    <option value="@item.Id">@item.Name</option>
                                    }
                            </InputSelect>
                            }
                        </div>
                        <div class="">
                            <button class="btn btn-sm btn-secondary px-auto" type="button" @onclick="OpenCategoryFormDialog">Add</button>
                        </div>
                    </div>

                    <div class="form-floating mb-2">
                        <InputNumber id="amount" class="form-control" @bind-Value="formRecordItem.Amount"></InputNumber>
                        <label for="floatingTextarea">Amount</label>
                    </div>

                    <InputRadioGroup @bind-Value="formRocordIsIncome">
                        <div class="form-check">
                            <InputRadio class="form-check-input" Value="true" />
                            <label>Income</label>
                        </div>
                        <div class="form-check mb-2">
                            <InputRadio class="form-check-input" Value="false" />
                            <label>Expense</label>
                        </div>
                    </InputRadioGroup>

                    <div class="form-floating mb-2">
                        <InputDate id="date" class="form-control" @bind-Value="formRecordItem.TransactionDate"></InputDate>
                        <label for="floatingTextarea">Transaction date</label>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button class="btn btn-outline-success mb-3" type="submit">Submit</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@if (IsOpen)
{
    <CategoryFormDialog Title="Add new category" OnClose="@CloseCategoryFormDialog" TypeOfModal="CategoryFormDialog.TypeOfModalDialog.Create"></CategoryFormDialog>
}

@code {
    public bool IsOpen { get; set; }

    private async Task CloseCategoryFormDialog(bool isCreatedOrUpdated)
    {
        IsOpen = false;
        await GetCategory();
        if (isCreatedOrUpdated)
            SelectedCategory = _categories.OrderBy(x => x.Id).Last().Id;
    }

    private void OpenCategoryFormDialog()
    {
        IsOpen = true;
        StateHasChanged();
    }

    /// <summary>
    /// Title of modal dialog.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    /// <summary>
    /// When modal dialog is closing, returns true.
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public TypeOfFormlDialog TypeOfDialog { get; set; }

    /// <summary>
    /// Planned Budget to edit. Fills in the form fields with this record.
    /// </summary>
    [Parameter]
    public PlannedBudgetVM? PlannedBudgetToFill
    {
        set
        {
            if (value is not null)
            {
                formRecordItem = value;

                _selectedCategoryId = formRecordItem.CategoryId;

                if (value.Amount > 0)
                    formRocordIsIncome = true;
                else
                    formRocordIsIncome = false;
            }
        }

        get
        {
            return formRecordItem;
        }
    }

    /// <summary>
    /// Returns the created or edited Planned Budget.
    /// </summary>
    [Parameter]
    public EventCallback<PlannedBudgetVM> FormRecordItem { get; set; }

    private PlannedBudgetVM formRecordItem = new();
    private bool formRocordIsIncome = false;
    private int? _selectedCategoryId;
    private bool _loadingCategories = true;
    List<CategoryVM> _categories = new();

    public int? SelectedCategory
    {
        get { return _selectedCategoryId; }
        set { _selectedCategoryId = value; }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task HandleValidSubmit()
    {
        if (formRocordIsIncome)
            formRecordItem.Amount = Math.Abs(formRecordItem.Amount);
        else
            formRecordItem.Amount = Math.Abs(formRecordItem.Amount) * -1;

        formRecordItem.CategoryId = _selectedCategoryId;


        FormRecordItem.InvokeAsync(formRecordItem);

        return OnClose.InvokeAsync(true);
    }

    private async Task GetCategory()
    {
        _loadingCategories = true;
        var respond = await _httpService.GetListOfItems("/api/category/");
        if (respond == null) return;
        var json = await respond.Content.ReadAsStringAsync();
        var categories = JsonConvert.DeserializeObject<List<CategoryVM>>(json);

        if (categories is not null)
        {
            _categories = categories;
            //var it = _categories.First();
            if (_selectedCategoryId is null)
                _selectedCategoryId = _categories.First().Id;
        }
        _loadingCategories = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (TypeOfDialog is TypeOfFormlDialog.AddRecord)
            formRecordItem.TransactionDate = new DateTime(DateTime.Now.Year, DateTime.Now.AddMonths(1).Month, 01);

        await GetCategory();
    }
}
