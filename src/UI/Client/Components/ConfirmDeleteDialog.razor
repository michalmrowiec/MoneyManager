@using MoneyManager.Client.Services;
@inject IHttpRecordService httpRecordService
@inject ErrorMessage errorMessage

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="btn-close" @onclick="@ModalCancel"></button>
            </div>
            <div class="modal-body">
                <p>@Text</p>
            </div>
            <div class="modal-footer">
                @switch (DialogType)
                {
                    case ModalDialogType.Ok:
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case ModalDialogType.OkCancel:
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case ModalDialogType.DeleteCancel:
                        <button type="button" class="btn btn-secondary" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public string? UriDelete { get; set; }

    [Parameter]
    public int? IdRecordToDelete { get; set; }

    public async Task Delete()
    {
        if (UriDelete == null || IdRecordToDelete == null)
            return;
        try
        {
            var response = await httpRecordService.DeleteItem((int)IdRecordToDelete, UriDelete);
            if (response == null) return;
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
                errorMessage.Message = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            errorMessage.Message = ex.Message;
        }
    }

    [Parameter]
    public List<EventCallback>? EventCallbacks { get; set; }

    private void ExecuteAll() => EventCallbacks?.ForEach(async x => await x.InvokeAsync());

    [Parameter]
    public ModalDialogType DialogType { get; set; }

    private void ModalCancel()
    {
        ExecuteAll();
    }

    private async Task ModalOk()
    {
        await Delete();
        ExecuteAll();
    }

    public enum ModalDialogType
    {
        Ok,
        OkCancel,
        DeleteCancel
    }
}