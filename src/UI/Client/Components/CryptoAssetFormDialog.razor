@using MoneyManager.Application.Functions.CryptoAssets.Queries;

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">PLACE</h4>
                <button type="button" class="btn-close" @onclick="@(x => OnClose.InvokeAsync())"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@_cryptoAsset" OnValidSubmit="@(x => OnClose.InvokeAsync())">

                    <div class="d-flex align-items-center justify-content-between mb-2">
                        <div class="flex-fill me-2">
                            @if (false)
                            {
                                <div class="d-flex align-items-center">
                                    <strong>Loading...</strong>
                                    <div class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></div>
                                </div>
                            }
                            else
                            {
                                <label for="exampleDataList" class="form-label">Datalist example</label>
                                <input autocomplete="on" class="form-control" list="datalistOptions" id="exampleDataList" placeholder="Type to search...">
                                <datalist id="datalistOptions">
                                    @foreach (var item in _tempSymbols)
                                    {
                                        <option value="@item"/>
                                    }
                                </datalist>

                                <InputSelect class="form-select" @bind-Value="_cryptoAsset.CryptocurrencySymbol">
                                    @foreach (var item in _tempSymbols)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                </InputSelect>
                            }
                        </div>
                    </div>

                    <div class="form-floating mb-2">
                        <InputText id="name" class="form-control disabled" @bind-Value="_cryptoAsset.CryptocurrencyName" />
                        <label for="floatingInput">Name</label>
                    </div>

                    <div class="form-floating mb-2">
                        <InputTextArea id="name" class="form-control" style="height: 5%;" @bind-Value="_cryptoAsset.Description" />
                        <ValidationMessage For="@(() => _cryptoAsset.Description)" />
                        <label for="floatingInput">Description</label>
                    </div>

                    <div class="form-floating mb-2">
                        <InputNumber id="amount" class="form-control" @bind-Value="_cryptoAsset.Amount"></InputNumber>
                        <label for="floatingTextarea">Amount</label>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button class="btn btn-outline-success mb-3" type="submit">Submit</button>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    private CryptoAssetVM _cryptoAsset = new();

    [Parameter]
    public EventCallback<CryptoAssetVM> CryptoAsset { get; set; } = new();

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private string[] _tempSymbols = { "BTC", "ETH" };
}
