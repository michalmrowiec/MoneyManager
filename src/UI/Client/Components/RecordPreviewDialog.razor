@using MoneyManager.Client.ViewModels

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="btn-close" @onclick="@ModalCancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@_record">
                    <DataAnnotationsValidator />

                    <div class="form-floating mb-2">
                        <InputText id="name" class="form-control disabled" @bind-Value="_record.Name" />
                        <label for="floatingInput">Name</label>
                    </div>

                    <div class="form-floating mb-2">
                        <InputText id="category" class="form-control disabled" @bind-Value="_record.CategoryName" />
                        <label for="floatingInput">Category</label>
                    </div>

                    <div class="form-floating mb-2">
                        <InputNumber id="amount" class="form-control disabled" @bind-Value="_record.Amount"></InputNumber>
                        <label for="floatingTextarea">Amount</label>
                    </div>

                    <div class="form-floating mb-2">
                        <InputDate id="date" class="form-control disabled" @bind-Value="_record.TransactionDate"></InputDate>
                        <label for="floatingTextarea">Transaction date</label>
                    </div>


                    @if (TypeD == TypeOfDialog.RecurringRecord)
                    {
                        <div class="form-floating mb-2">
                            <text class="form-control disabled">@_recurringRecord.NextDate.ToShortDateString()</text>
                            <label for="floatingInput">Estimated next date</label>
                        </div>

                        @if (_recurringRecord.IsActive)
                        {
                            <div class="form-floating mb-2">
                                <text class="form-control disabled">Active</text>
                                <label for="floatingInput">Status</label>
                            </div>
                        }
                        else
                        {
                            <div class="form-floating mb-2">
                                <text class="form-control disabled">Dezactive</text>
                                <label for="floatingInput">Status</label>
                            </div>
                        }
                    }

                    <div class="d-flex justify-content-end">
                        <button class="btn btn-outline-secondary mb-3" type="button" @onclick="@ModalCancel">Close</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public RecordVM? RecordVM
    {
        set
        {
            if (value is not null)
            {
                _record.Name = value.Name;
                _record.CategoryName = value.CategoryName;
                _record.Amount = value.Amount;
                _record.TransactionDate = value.TransactionDate;
            }
        }
    }

    [Parameter]
    public RecurringRecordVM? RecurrinRecordVM
    {
        set
        {
            if (value is not null)
            {
                _record.Name = value.Name;
                _record.CategoryName = value.CategoryName;
                _record.Amount = value.Amount;
                _record.TransactionDate = value.TransactionDate;
                _recurringRecord.NextDate = value.NextDate;
                _recurringRecord.IsActive = value.IsActive;
            }
        }
    }

    [Parameter]
    public TypeOfDialog TypeD { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private RecordVM _record = new();
    private RecurringRecordVM _recurringRecord = new();

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    public enum TypeOfDialog
    {
        Record,
        RecurringRecord
    }
}