@using EnumsNET;
@using Microsoft.AspNetCore.WebUtilities;
@using MoneyManager.Client.Models.Response;
@using MoneyManager.Client.Services;
@using MoneyManager.Client.ViewModels;
@using Newtonsoft.Json;
@using System.ComponentModel;
@inject IHttpRecordService httpService
@inject NavigationManager navManager
@inject ErrorMessage errorMessage

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@(((TypeOfChangePasswordDialog)TypeOfDialog).AsString(EnumFormat.Description))</h4>
                @if (TypeOfDialog == TypeOfChangePasswordDialog.ChangePassword)
                {
                    <button type="button" class="btn-close" @onclick="@ModalCancel"></button>
                }
            </div>
            <div class="modal-body">
                <p>After successfully changing your password, you will be redirected to the login screen.</p>
                <EditForm Model="@RegisterUserVM" OnValidSubmit="HandleValidSubmit">
                    <div class="form-group">
                        <label>New password</label>
                        <InputText @bind-Value="RegisterUserVM.Password" type="password" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Repeat new password</label>
                        <InputText @bind-Value="RegisterUserVM.RepeatPassword" type="password" class="form-control" />
                    </div>
                    <button class="btn btn-primary my-2">
                        @if (_loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Change password
                    </button>

                    @if (_errorMessage != null)
                    {
                        <div class="alert alert-danger">@_errorMessage</div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public TypeOfChangePasswordDialog TypeOfDialog { get; set; }

    [Parameter]
    public List<EventCallback>? EventCallbacks { get; set; }

    public RegisterUserVM RegisterUserVM { get; set; } = new();
    private bool _loading;
    private string? _errorMessage;
    private string? _token;

    protected override void OnInitialized()
    {
        if(TypeOfDialog == TypeOfChangePasswordDialog.ResetPassword)
        {
            Navigate();
        }
    }

    private void ExecuteAll() => EventCallbacks?.ForEach(async x => await x.InvokeAsync());

    private void ModalCancel()
    {
        ExecuteAll();
    }

    private async void HandleValidSubmit()
    {
        _loading = true;
        _errorMessage = null;
        try
        {
            var result = await httpService.UpdateItem(RegisterUserVM, "api/account/change-password", _token);

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
                navManager.NavigateTo("login");
            else
            {
                errorMessage.Message = await result.Content.ReadAsStringAsync();
                var response = await result.Content.ReadAsStringAsync();
                var baseResponse = JsonConvert.DeserializeObject<UserResponse>(response) ?? new();
                errorMessage.Message = baseResponse.Message;
                baseResponse?.ValidationErrors?.ForEach(e => _errorMessage += $"{e}. ");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    void Navigate()
    {
        var query = new Dictionary<string, string>();

        navManager.NavigateTo(QueryHelpers.AddQueryString(navManager.Uri, query));

        var uri = navManager.ToAbsoluteUri(navManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("access_token", out var param))
        {
            _token = param.First();
        }

        _loading = false;
        StateHasChanged();
    }

    public enum TypeOfChangePasswordDialog
    {
        [Description("Change Password")]
        ChangePassword,
        [Description("Reset Password")]
        ResetPassword
    }
}